name: Override PR Merge Complete
on:
  workflow_run:
    workflows: ["Override PR Merge Initialise"]
    types:
      - completed

jobs:
    dump-context:
      name: Dump Context
      runs-on: ubuntu-latest
      steps:
        - name: Dump context
          run: |
            echo "Dumping context"
            echo '${{ toJson(github) }}'

# jobs:

#   import-event:
#     name: Import Event Details
#     # Run only if
#     # 1. The workflow run was triggered by an issue comment.
#     # 2. The previous workflow run was successful.
#     if: |
#       github.event.workflow_run.event == 'issue_comment' &&
#       github.event.workflow_run.conclusion == 'success'
#     runs-on: ubuntu-latest
#     permissions: {}

#     outputs:
#       trigger_event: ${{ steps.read-artifact.outputs.event_json }}

#     steps:
#       - name: 'Download artifact'
#         uses: actions/download-artifact@v4
#         with:
#           name: event-artifact
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           run-id: ${{ github.event.workflow_run.id }}

#       - name: 'Read artifact'
#         id: read-artifact
#         run: |
#           echo "Reading artifact"
#           echo "event_json=$(cat event.json | jq -c)" >> $GITHUB_OUTPUT

#   get-permissions:
#     name: Get User Permissions
#     needs: import-event
#     # Run only if
#     # 1. The comment was made on a PR.
#     # 2. The comment was exactly "/merge" sans the quotes.
#     # 3. The PR is open.
#     if: |
#       ${{ fromJson(needs.import-event.outputs.trigger_event).issue.pull_request }} &&
#       ${{ fromJson(needs.import-event.outputs.trigger_event).comment.body == '/merge' }} &&
#       ${{ !fromJson(needs.import-event.outputs.trigger_event).issue.closed_at }} &&
#       ${{ fromJson(needs.import-event.outputs.trigger_event).issue.state == 'open' }}

#     # name: Get User Permissions
#     runs-on: ubuntu-latest
#     permissions: {}

#     outputs:
#       user_permission: ${{ steps.permission.outputs.permission }}

#     steps:

#       - name: Get permissions
#         id: permission
#         env:
#           USERNAME: ${{ github.event.workflow_run.event == 'issue_comment' && fromJson(needs.import-event.outputs.trigger_event).comment.user.login || github.actor }}
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#         run: |
#           echo "Fetching permissions for user: $USERNAME"
#           RESPONSE=$(gh api \
#             -H "Accept: application/vnd.github+json" \
#             -H "X-GitHub-Api-Version: 2022-11-28" \
#             repos/$GITHUB_REPOSITORY/collaborators/$USERNAME/permission | jq -r .permission)
#           echo "Permission: $RESPONSE"
#           echo "permission=$RESPONSE" >> $GITHUB_OUTPUT

#   merge_comment:
#     name: FF Merge PR
#     needs:
#       - import-event
#       - get-permissions

#     runs-on: ubuntu-latest

#     permissions:
#       pull-requests: write
#       issues: write
#       contents: write

#     # Run only if
#     # 1. The user has write or admin permissions on the repository.
#     if: ${{ contains(fromJSON('["write", "admin"]'), needs.get-permissions.outputs.user_permission) }}

#     env:
#       PULL_NUMBER: ${{ fromJson(needs.import-event.outputs.trigger_event).issue.number }}
#       ERROR_MESSAGE: |
#         ### ⚠️ PR cannot be merged in! ⚠️

#         Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       # Get details of the PR. The target and base branch. And also whether the PR can be merged in or not.
#       - name: Get PR details
#         id: get-pr-details
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ github.repository }}
#           pull_number: ${{ env.PULL_NUMBER }}
#         run: |
#           echo "Fetching pull request details"
#           RESPONSE=$(gh api \
#             -H "Accept: application/vnd.github+json" \
#             -H "X-GitHub-Api-Version: 2022-11-28" \
#             repos/$repository/pulls/$pull_number)
#           echo "response: $RESPONSE"
#           echo "data=$RESPONSE" >> $GITHUB_OUTPUT

#       # Merge (rebase) the PR if it is allowed.
#       - name: Merge the PR
#         id: merge-status
#         shell: bash
#         env:
#           MERGEABLE_STATUS: ${{ fromJson(steps.get-pr-details.outputs.data).mergeable_state }}
#           BASE_BRANCH: ${{ fromJson(steps.get-pr-details.outputs.data).base.ref }}
#           HEAD_BRANCH: ${{ fromJson(steps.get-pr-details.outputs.data).head.ref }}
#           # this is used to perform the final push to the base branch to allow the standard push triggers to run.
#           REMOTE_URL: https://${{ secrets.FAST_FORWARD_MERGE_TOKEN }}@github.com/${{ github.repository }}.git
#           SUCCESS_MESSAGE: |
#             ### 🎉 Success! 🎉

#             PR successfully Fast Forward merged in ✅.
#         run: |
#           if [ "$MERGEABLE_STATUS" = "clean" ]; then
#             git config --global user.email "<>"
#             git config --global user.name "GitHub Actions"
#             git checkout $HEAD_BRANCH
#             git pull origin $HEAD_BRANCH
#             git checkout $BASE_BRANCH
#             git pull origin $BASE_BRANCH
#             git rebase $HEAD_BRANCH
#             git push $REMOTE_URL $BASE_BRANCH
#             {
#               echo 'message<<EOF'
#               echo "${{ env.SUCCESS_MESSAGE }}"
#               echo EOF
#             } >> "$GITHUB_OUTPUT"
#           else
#             {
#               echo 'message<<EOF'
#               echo "${{ env.ERROR_MESSAGE }}"
#               echo EOF
#             } >> "$GITHUB_OUTPUT"
#           fi

#       # Post a success/failure comment to the PR.
#       - name: Add comment to PR
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ github.repository }}
#           pull_number: ${{ env.PULL_NUMBER }}
#           body: ${{ steps.merge-status.outputs.message }}
#         run: |
#           echo "Adding success/failure comment to PR"
#           RESPONSE=$(gh pr comment $pull_number --repo "$repository" -b "$body")
#           echo "response: $RESPONSE"

#       # Post a failure message when any of the previous steps fail.
#       - name: Add failure comment to PR
#         if: ${{ failure() }}
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           repository: ${{ github.repository }}
#           pull_number: ${{ env.PULL_NUMBER }}
#           body: ${{ env.ERROR_MESSAGE }}
#         run: |
#           echo "Adding failure comment to PR"
#           RESPONSE=$(gh pr comment $pull_number --repo "$repository" -b "$body")
#           echo "response: $RESPONSE"
