openapi: '3.1.0'
info:
  title: Test Results Api
  version: '1.0.0'
  description: This API is for obtaining or submitting test results.
  contact:
    name: Result API contact
    url: https://url-to-api-team-confluence-support-page
    email: result@api.ukhsa.gov.uk
# servers:
#   - url: https://azgw.api.ukhsa.gov.uk/detect/testing/v1
#     description: UKHSA Test Results API Server.
tags:
  - name: results
    description: Operations related to test results.

paths:
  /results/:
    get:
      summary: List all test results
      description: List all test results.
      operationId: getResults
      tags:
        - results
      parameters:
        - in: query
          name: page_query
          style: form
          schema:
            $ref: '#/components/schemas/ListPageQuery'
        - in: query
          name: type
          schema:
            type: string
            description: The type of test to filter by.
            examples:
            - Lateral Flow Test
        - in: query
          name: result
          schema:
            type: string
            description: The type of test to filter by.
            x-extensible-enum:
              - POSITIVE
              - NEGATIVE
              - UNREADABLE
            examples:
              - POSITIVE
              - NEGATIVE
              - UNREADABLE
      responses:
        '200':
          description: List of Results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      summary: Submit a new test result
      description: Submit a new test result.
      operationId: submitResult
      tags:
        - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultRequest'
        description: The test result to be submitted.
      responses:
        '200':
          description: Test Result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /results/{resultId}:
    get:
      summary: Get a specific test result
      description: Get a specific test result.
      operationId: getResult
      tags:
        - results
      parameters:
        - name: resultId
          in: path
          required: true
          description: The id of the test result to retrieve.
          schema:
            type: string
            format: uuid
            examples:
              - 'de750613-ef3c-4f5d-8148-10308b91896c'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultResponse'
          description: A JSON array containing results objects.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth 2 with the authorization code flow. [More info](https://oauth.net/2/grant-types/authorization-code/)
      flows:
        authorizationCode:
          authorizationUrl: https://domain.test/api/oauth/dialog
          tokenUrl: https://domain.test/api/oauth/token
          refreshUrl: https://domain.test/api/oauth/token
          scopes:
            tests:read: read test results
            tests:write: submit test results
  
  schemas:
    ResultRequest:
      type: object
      description: Schema for submitting a test result.
      properties:
        nhsNumber:
          type: string
          pattern: '^\d{3}(?:-| )?\d{3}(?:-| )?\d{4}$'
          examples:
            - '4857773456'
            - '485 777 3456'
            - '485-777-3456'
        type:
          type: string
          examples:
            - Lateral Flow Test
        result:
          type: string
          x-extensible-enum:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
          examples:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
      required:
        - nhsNumber
        - type
        - result
    ResultResponse:
      type: object
      description: Schema for a test result response.
      properties:
        resultId:
          type: string
          format: uuid
          description: The id of the test result
          examples:
            - 'de750613-ef3c-4f5d-8148-10308b91896c'
        nhsNumber:
          type: string
          description: The NHS number of the patient
          examples:
            - '485 777 3456'
        type:
          type: string
          description: The type of test
          examples:
            - 'Lateral Flow Test'
        result:
          type: string
          description: The result of the test
          x-extensible-enum:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
          examples:
            - POSITIVE
            - NEGATIVE
            - UNREADABLE
      required:
        - resultId
        - nhsNumber
        - type
        - result
    ResultsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ResultResponse'
        metadata:
          $ref: '#/components/schemas/ListPagedMetadata'
    ListPagedMetadata:
      type: object
      properties:
        totalResults:
          type: integer
          format: int32
          description: Total number of results.
          examples:
            - 200
        totalPages:
          type: integer
          format: int32
          description: Total number of paged results.
          examples:
            - 10
        currentPage:
          type: integer
          format: int32
          description: Current result page.
          examples:
            - 1
        pageSize:
          type: integer
          format: int32
          description: Number of results per page.
          examples:
            - 20
      required:
        - totalResults
        - totalPages
        - currentPage
        - pageSize

    ListPageQuery:
      type: object
      description: Common results paging query string object.
      properties:
        page_offset:
          type: integer
          format: int32
          description: The page number of the results to be returned.
        page_size:
          type: integer
          format: int32
          description: The numbers of items to return per page.

    ProblemDetails:
      type: object
      description: Schema for detailed problem information.
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type.
          format: uri-reference
          maxLength: 1024
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          format: int32
          minimum: 100
          maximum: 599
        title:
          type: string
          description: A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem, except for purposes of localization.
          maxLength: 1024
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          maxLength: 4096
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          maxLength: 1024
        traceId:
          type: string
          description: A unique identifier when an error occurs while using a the API.
          maxLength: 1024
        errors:
          $ref: '#/components/schemas/Errors'
        code:
          type: string
          description: An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
          maxLength: 50
      required:
        - type
        - status
        - title
        - detail
        - instance

    Errors:
      type: array
      description: An array of error details to accompany a problem details response.
      maxItems: 1000
      items:
        $ref: '#/components/schemas/ErrorDetail'

    ErrorDetail:
      type: object
      description: An object to provide explicit details on a problem towards an API consumer.
      properties:
        detail:
          type: string
          description: A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.
          maxLength: 4096
        pointer:
          type: string
          description: A JSON Pointer to a specific request body property that is the source of error.
          maxLength: 1024
        parameter:
          type: string
          description: The name of the query or path parameter that is the source of error.
          maxLength: 1024
        header:
          type: string
          description: The name of the header that is the source of error.
          maxLength: 1024
        code:
          type: string
          description: A string containing additional provider specific codes to identify the error context.
          maxLength: 50
      required:
        - detail

  responses:
    BadRequest:
      description: >
        The request was malformed or could not be processed.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            validationError:
              $ref: '#/components/examples/validation-error'
    Unauthorized:
      description: Access token is not set or invalid.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            unauthorized:
              $ref: '#/components/examples/unauthorized'
    Forbidden:
      description: The requestor is not authorized to perform this operation on the resource.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            forbidden:
              $ref: '#/components/examples/forbidden'
    NotFound:
      description: The requested resource was not found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            notFound:
              $ref: '#/components/examples/not-found'
    ValidationError:
      description: Your client issued a request that failed validation.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            validationError:
              $ref: '#/components/examples/validation-error'
    ServerError:
      description: The server encountered an unexpected error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            serverError:
              $ref: '#/components/examples/server-error'
  examples:
    unauthorized:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.2
        status: 401
        title: Unauthorized
        detail: Access token not set or invalid. The requested resource could not be returned
        instance: GET /some/path
    forbidden:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.4
        status: 403
        title: Forbidden
        detail: The resource could not be returned as the requestor is not authorized
        instance: GET /some/path
    not-found:
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.5
        status: 404
        title: Not found
        detail: The requested resource was not found
        instance: GET /some/path
    validation-error:
      description: >
        This problem occurs when the request is deemed unprocessable.


        The client issued a request that failed validation. Certain validation libraries return multi-errors and cannot be easily parsed into discreet types. This problem type, afforded the provider with the ability to surface all validation errors and negate the need for a trial and error workflow on your side.
      value:
        type: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5.1
        status: 400
        title: Validation Error
        detail: The request is invalid.
        instance: GET /some/path
        code: 400-02
        errors:
          - detail: Your request does not contain the required property {name}
            pointer: '#/name'
          - detail: The path parameter does not conform to the expected format
            header: resultId
    server-error:
      value:
        type: ahttps://datatracker.ietf.org/doc/html/rfc9110#section-15.6.1
        status: 500
        title: Server Error
        instance: GET /some/path
        detail: The server encountered an unexpected error

security:
  - oAuth:
      - tests:read
      - tests:write