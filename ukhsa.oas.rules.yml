extends: 
  - ./zalando.oas.rules.yml
  - [spectral:oas, recommended]
  - https://unpkg.com/@stoplight/spectral-documentation/dist/ruleset.mjs

documentationUrl: https://refactored-chainsaw-8qmo7ge.pages.github.io/
rules:
  oas3-api-servers: off
  must-have-info-x-api-id: off
  must-always-return-json-objects-as-top-level-data-structures: warn
  should-not-use-api-as-base-path: off

  # MUST Properties must use lower camel case.
  # => /docs/spectral-rules/must/must-use-camel-case-for-property-names.md

  must-use-snake-case-for-property-names: off
  must-use-camel-case-for-property-names:
    given: $.paths.*.*[responses,requestBody]..content..schema..properties.*~
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
    recommended: true
    description: Properties must use lower camel case.
    message: Properties must use lower camel case.

  # MUST Query parameters must use lower camel case.
  # => /docs/spectral-rules/must/must-use-camel-case-for-query-parameters.md

  must-use-snake-case-for-query-parameters: off
  must-use-camel-case-for-query-parameters:
    given: $.paths.*.*.parameters[?(@ && @.in=='query')].name
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
    recommended: true
    description: Query parameters must use lower camel case.
    message: Query parameters must use lower camel case.

  # MUST The `info` object must have an `x-audience` that matches at least one of these values: company-internal, partner-external, premium-external or public-external.
  # => /docs/spectral-rules/must/must-have-info-api-audience.md

  must-provide-api-audience: off
  must-have-info-api-audience:
    given: $.info
    severity: error
    then:
      - function: pattern
        functionOptions:
          match: ^(company-internal|partner-external|premium-external|public-external)$
        field: x-audience
      - function: defined
        field: x-audience
    recommended: true
    description: 'The `info` object must have an `x-audience` that matches at least one of these values: company-internal, partner-external, premium-external or public-external.'
    message: Missing or wrong `info.x-audience`, should be one of company-internal, partner-external, premium-external or public-external.

  # MUST The `info` object must have an `x-value-chain` that matches at least one of these values: prevent, detect, analyse, respond, cross-cutting or enabling.
  # => /docs/spectral-rules/must/must-have-info-value-chain.md

  must-have-info-value-chain:
    given: $.info
    severity: error
    then:
      - function: pattern
        functionOptions:
          match: ^(prevent|detect|analyse|respond|cross-cutting|enabling)$
        field: x-value-chain
      - function: defined
        field: x-value-chain
    recommended: true
    description: 'The `info` object must have an `x-value-chain` that matches at least one of these values: prevent, detect, analyse, respond, cross-cutting or enabling.'
    message: Missing or wrong `info.x-value-chain`, should be one of prevent, detect, analyse, respond, cross-cutting or enabling.

  # MUST ALL requests MUST go through `https` protocol only
  # => /docs/spectral-rules/must/must-use-https-protocol-only.md

  must-use-https-protocol-only:
    given: $.servers..url
    severity: error
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"
    recommended: true
    description: ALL requests MUST go through `https` protocol only
    message: Servers MUST be `https` and no other protocol is allowed.

  # MUST APIs MUST NOT use `HTTP` Basic Authentication.
  # => /docs/spectral-rules/must/must-not-use-http-basic-authentication.md

  must-not-use-http-basic-authentication:
    given: $.components.securitySchemes[*]
    severity: error
    then:
      field: scheme
      function: pattern
      functionOptions:
        notMatch: basic
    recommended: true
    message: APIs MUST NOT use `HTTP` Basic Authentication.
    description: >-
      HTTP Basic is an inherently insecure way to pass credentials to the API. They're placed in the URL in base64 which can be decrypted easily. Even if you're using a token, there are far better ways to handle passing tokens to an API which are less likely to leak.


      See OWASP advice. https://owasp.org/API-Security/editions/2019/en/0xa2-broken-user-authentication/

  # SHOULD Every request SHOULD support `application/json` media type.
  # => /docs/spectral-rules/should/should-support-application-json-content-request-body.md

  should-support-application-json-content-request-body:
    given: $.paths[*][*].requestBody.content
    severity: warn
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties:
            application/json: true
          required:
            - application/json
    recommended: true
    description: Every request SHOULD support at least one `application/json` content type
    message: Every request SHOULD support at least one `application/json` content type.

  # MUST A GET request MUST NOT accept a request body.
  # => /docs/spectral-rules/must/must-not-define-request-body-for-get-requests.md

  must-not-define-request-body-for-get-requests:
    given: $.paths..get.requestBody
    severity: error
    then:
      function: undefined
    recommended: true
    description: Defining a request body on a HTTP GET is in some implementations, but is increasingly frowned upon due to the confusion that comes from unspecified behavior in the HTTP specification.
    message: A GET request MUST NOT accept a request body.

  # MUST All APIs MUST have a security scheme defined.
  # => /docs/spectral-rules/must/must-define-security-schemes.md

  must-define-security-schemes:
    given: $..components
    severity: error
    then:
      field: securitySchemes
      function: truthy
    recommended: true
    description: This API definition does not have any security scheme defined, which means the entire API is open to the public. That's probably not what you want, even if all the data is read-only. Setting lower rate limits for the public and letting known consumers use more resources is a handy path to monetization, and helps know who your power users are when changes need feedback or migration, even if not just good practice.
    message: All APIs MUST have a security scheme defined.
