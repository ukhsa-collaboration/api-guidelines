extends: [[spectral:oas, off]]

functions:
  - is-object-schema
  - is-problem-json-schema
  - count-resource-types

functionsDir: functions

description: >-
  Not covered: Zalando guidelines [223](https://opensource.zalando.com/restful-api-guidelines/#223), [224](https://opensource.zalando.com/restful-api-guidelines/#224), [104](https://opensource.zalando.com/restful-api-guidelines/#104), [105](https://opensource.zalando.com/restful-api-guidelines/#105), and [225](https://opensource.zalando.com/restful-api-guidelines/#225)

formats:
  - oas2
  - oas3
  - oas3.0
  - oas3.1

rules:
  must-always-return-json-objects-as-top-level-data-structures:
    given: $.paths.*.*[responses,requestBody]..content..schema
    severity: error
    then:
      function: is-object-schema
    description: >-
      The top-level data structure for a`request body` or `response body` must be an object.


      **Invalid Example**


      ```yaml lineNumbers

      requestBody:
         content:
           application/json:
             schema:
               type: array
               items:
                 type: string
      ```


      **Valid Example**


      ```yaml lineNumbers

      requestBody:
         content:
           application/json:
             schema:
               type: object
               properties:
                 first_name:
                   type: string
                 last_name:
                   type: string
      ```


      [Zalando Guideline 210](https://opensource.zalando.com/restful-api-guidelines/#210)
    message: Top-level data structure must be an object

  should-use-x-extensible-enum:
    given: $.paths..[?(@ && @.type=='string')].enum
    severity: warn
    then:
      function: undefined
    description: >-
      `enum` values should use the marker `x-extensible-enum` rather than `enum`. 


      **Invalid Example**


      ```yaml lineNumbers

      delivery_methods:
        type: string
        enum:
          - PARCEL
          - LETTER
          - EMAIL
      ```


      **Valid Example**


      ```yaml lineNumbers

      delivery_methods:
        type: string
        x-extensible-enum:
          - PARCEL
          - LETTER
          - EMAIL
      ```


      [Zalando Guideline 112](https://opensource.zalando.com/restful-api-guidelines/#112)
    message: Should use `x-extensible-enum` instead of `enum`
  must-not-use-uri-versioning:
    given: $.paths.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        notMatch: /v[0-9]+/
    description: >+
      Path must not contain versions. 


      **Invalid Example**


      ```yaml
       /user/v2:
      ```


      **Valid Example**


      ```yaml
       /user:
      ```


      [Zalando Guideline 115](https://opensource.zalando.com/restful-api-guidelines/#115)
    message: Path must not contain versioning
  must-use-snake-case-for-property-names:
    given: $.paths.*.*[responses,requestBody]..content..schema..properties.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z_][a-z_0-9]*$
    description: >-
      Property names must use snake-case strings that match this pattern: `^[a-z_][a-z_0-9]*$`. 


      The first character must be a lower case letter, or an underscore, and subsequent characters can be a letter, an underscore, or a number.


      **Valid Examples**


      `customer_number`

      `sales_order_number`

      `billing_address`


      [Zalando Guideline 118](https://opensource.zalando.com/restful-api-guidelines/#118)
    message: Property name has to be ASCII snake_case
  must-use-lowercase-with-hypens-for-path-segments:
    given: $.paths.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^(([\/a-z][a-z0-9\-\/]*)?({[^}]*})?)+$
    description: >-
      Path segments must use lowercase letters and hyphens to separate words.


      **Invalid Example**


      ```yaml

      /BeachReport:

      ```

      **Valid Example**


      ```yaml

      /beach-report:

      ```


      [Zalando Guideline 129](https://opensource.zalando.com/restful-api-guidelines/#129)
    message: Path segments have to be lowercase separate words with hyphens
  must-use-snake-case-for-query-parameters:
    given: $.paths.*.*.parameters[?(@ && @.in=='query')].name
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z][_a-z0-9]*$
    description: >-
      Query parameter must use snake-case and match this pattern: `^[a-z][_a-z0-9]*$`.


      **Invalid Example**


      ```yaml lineNumbers

      parameters:
         - schema:
             type: string
           in: query
           name: weather-station
      ```


      **Valid Example**


      ```yaml lineNumbers

      parameters:
         - schema:
             type: string
           in: query
           name: weather_station
      ```


      [Zalando Guideline 130](https://opensource.zalando.com/restful-api-guidelines/#130)
    message: Query parameters must be snake_case
  should-use-hyphenated-pascal-case-for-header-parameters:
    given: $.paths.*.*.parameters[?(@ &&  @.in=='header')].name
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^([A-Z][a-z]*)(-[A-Z0-9][a-z0-9]*)*$
    description: >-
      Header parameters should use hyphenated Pascal case.


      **Invalid Example**


      ```yaml lineNumbers

      parameters:
        - schema:
            type: string
          in: header
          name: PascalCaseHeader
      ```

      **Valid Example**


      ```yaml lineNumbers

      parameters:
        - schema:
            type: string
          in: header
          name: Pascal-Case-Header
      ```
    message: Header parameters should be Hyphenated-Pascal-Case
  should-not-use-api-as-base-path:
    given: $.paths.*~
    severity: warn
    then:
      function: pattern
      functionOptions:
        notMatch: ^/api
    description: >-
      Base path should not include `api`.


      **Invalid Example**


      ```yaml

      /api/user:

      ```


      **Valid Example**


      ```yaml

      /user:

      ```

      [Zalando Guideline 135](https://opensource.zalando.com/restful-api-guidelines/#135)
    message: Path should not start with /api
  must-use-normalized-paths-without-empty-path-segments:
    given: $.paths.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        notMatch: //
    description: >-
      Path segments must not contain duplicate slashes.


      **Invalid Example**


      ```yaml

      /user//report:

      ```

      **Valid Example**


      ```yaml

      /beach-report:

      ```


      [Zalando Guideline 136](https://opensource.zalando.com/restful-api-guidelines/#136)
    message: Empty path segments are not allowed
  must-use-normalized-paths-without-trailing-slash:
    given: $.paths.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        notMatch: /$
    description: >-
      Path segments must not contain duplicate slashes.


      **Invalid Example**


      ```yaml

      /user//report:

      ```

      **Valid Example**


      ```yaml

      /beach-report:

      ```


      [Zalando Guideline 136](https://opensource.zalando.com/restful-api-guidelines/#136)
    message: Path with trailing slash is not allowed
  should-limit-number-of-resource-types:
    given: $.paths
    severity: warn
    then:
      function: count-resource-types
      functionOptions:
        max: 8
    description: >-
      Resource types (root URL paths) should be limited to no more than eight.


      [Zalando Guideline 146](https://opensource.zalando.com/restful-api-guidelines/#146)
    message: '{{error}}'
  should-limit-number-of-sub-resource-levels:
    given: $.paths.*~
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^\/[^\/]*((\/{[^}]*})*\/[^\/]*(\/{[^}]*})*){0,3}\/?$
    description: >-
      Path should contain no more than 3 sub-resources (nested resources with non-root URL paths).


      **Invalid Example**


      ```yaml
        /users/location/name/address/email:
      ```


      **Valid Example**


      ```yaml
        /users/{userId}/{name}:
      ```


      [Zalando Guideline 147](https://opensource.zalando.com/restful-api-guidelines/#147)
    message: Sub-resource levels should by <= 3
  should-use-standard-http-status-codes:
    given: $.paths.*.*.responses.*~
    severity: warn
    then:
      function: enumeration
      functionOptions:
        values:
          - '100'
          - '101'
          - '200'
          - '201'
          - '202'
          - '203'
          - '204'
          - '205'
          - '206'
          - '207'
          - '300'
          - '301'
          - '302'
          - '303'
          - '304'
          - '305'
          - '307'
          - '400'
          - '401'
          - '402'
          - '403'
          - '404'
          - '405'
          - '406'
          - '407'
          - '408'
          - '409'
          - '410'
          - '411'
          - '412'
          - '413'
          - '414'
          - '415'
          - '416'
          - '417'
          - '423'
          - '426'
          - '428'
          - '429'
          - '431'
          - '500'
          - '501'
          - '502'
          - '503'
          - '504'
          - '505'
          - '511'
          - default
    description: >-
      `response` should use standard HTTP status codes.


      **Invalid Example**


      `Error-500` is not a valid HTTP status code.


      ```yaml lineNumbers
        /weather:
          get:
            responses:
              'Error-500':
                description: Internal Server Error
      ```

      **Valid Example**


      `500` is a valid HTTP status code.


      ```yaml lineNumbers
        /weather:
          get:
            responses:
              '500':
                description: Internal Server Error
      ```


      [Zalando Guideline 150](https://opensource.zalando.com/restful-api-guidelines/#150)
    message: '{{property}} is not a standardized response code'
  must-specify-default-response:
    given: $.paths.*.*.responses
    severity: error
    then:
      function: truthy
      field: default
    description: >-
      Each `operation` must include a default error response that combines multiple errors. 


      **Invalid Example**


      The example below contains only a `200` response.


      ```yaml lineNumbers

      responses:
         ...
      get:
        summary: Get User Info by User ID
         tags: []
         responses:
           '200':
             description: OK
      ```


      **Valid Example**


      The example below contains a `200` response and a `default` response that references the `Problem` errors file.


      ```yaml lineNumbers

      responses:
         ...
      get:
        summary: Get User Info by User ID
         tags: []
         responses:
           '200':
             description: OK
           default:
             description: User Not Found
             content:
               application/problem+json:
                 schema:
                   $ref: ../models/Problem.yaml
      ```


      [Zalando Guideline 151](https://opensource.zalando.com/restful-api-guidelines/#151)
    message: Operation does not contain a default response
  must-use-problem-json-as-default-response:
    given: $.paths.*.*.responses.default
    severity: error
    then:
      function: truthy
      field: content.application/problem+json
    description: >-
      The content type for the default response must be `application/problem+json`.


      **Invalid Example**


      The default response in this example incorrectly uses `application/json` as the content type.


      ```yaml lineNumbers

      responses:
         ...
      get:
        summary: Get User Info by User ID
         tags: []
         responses:
           ...
           default:
             description: ...
             content:
               application/json:
                 schema:
                   $ref: ../models/Problem.yaml
      ```


      **Valid Example**


      The default response in this example correctly uses `application/problem+json` as the content type.


      ```yaml lineNumbers

      responses:
         ...
      get:
        summary: Get User Info by User ID
         tags: []
         responses:
           ...
           default:
             description: ...
             content:
               application/problem+json:
                 schema:
                   $ref: ../models/Problem.yaml
      ```


      [Zalando Guideline 151](https://opensource.zalando.com/restful-api-guidelines/#151)
    message: Operation must use problem json as default response
  must-define-a-format-for-number-types:
    given: $.paths.*.*..schema..properties..[?(@ && @.type=='number')]
    severity: error
    then:
      - function: defined
        field: format
      - function: pattern
        functionOptions:
          match: ^(float|double|decimal)$
        field: format
    description: >+
      `number` properties must have a format defined (`float`, `double`, or `decimal`).


      **Invalid Example**


      ``` yaml lineNumbers

      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  range:
                    type: number
      ```


      **Valid Example**


      ``` yaml lineNumbers

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                range:
                  type: number
                  format: float
      ```


      [Zalando Guideline 171](https://opensource.zalando.com/restful-api-guidelines/#171)
    message: Numeric properties must have valid format specified
  must-define-a-format-for-integer-types:
    given: $.paths.*.*..schema..properties..[?(@ && @.type=='integer')]
    severity: error
    then:
      - function: defined
        field: format
      - function: pattern
        functionOptions:
          match: ^(int32|int64|bigint)$
        field: format
    description: >+
      `integer` properties must have a format defined (`int32`, `int64`, or `bigint`).


      **Invalid Example**


      ``` yaml lineNumbers

      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  range:
                    type: integer
      ```


      **Valid Example**


      ``` yaml lineNumbers

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                range:
                  type: integer
                  format: int32
      ```


      [Zalando Guideline 171](https://opensource.zalando.com/restful-api-guidelines/#171)
    message: Numeric properties must have valid format specified
  should-prefer-standard-media-type-names:
    given: $.paths.*.*.responses.*.content.*~
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^application\/(problem\+)?json$|^[a-zA-Z0-9_]+\/[-+.a-zA-Z0-9_]+;(v|version)=[0-9]+$
    description: >-
      Response content should use a standard media type `application/json` or `application/problem+json` (required for problem schemas).


      **Invalid Example**


      ```yaml lineNumbers

      '204':
            description: No Content
            content:
              application/xml:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                    url:
                      type: string
                      format: uri-reference
      ```

      **Valid Example**


      ```yaml lineNumbers

      '204':
            description: No Conten
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                    url:
                      type: string
                      format: uri-reference
      ```


      [Zalando Guideline 172](https://opensource.zalando.com/restful-api-guidelines/#172)
    message: Custom media types should only be used for versioning
  must-use-problem-json-for-errors:
    given: $.paths.*.*.responses[?(@property.match(/^(4|5)/))]
    severity: error
    then:
      function: truthy
      field: content.application/problem+json
    description: >-
      The content type for 4xx and 5xx status codes must be `application/problem+json`.


      **Invalid Example**


      The content type for the `503` response in this example incorrectly uses the `application/json` content type.


      ```yaml lineNumbers

      responses:
         '503':
           description: ...
           content:
             application/json:
               schema:
                 $ref: ../models/Problem.yaml
      ```


      **Valid Example**


      The content type for the `503` response in this example correctly uses the `application/problem+json` content type.


      ```yaml lineNumbers

      responses:
         '503':
           description: ...
           content:
             application/problem+json:
               schema:
                 $ref: ../models/Problem.yaml
      ```


      [Zalando Guideline 176](https://opensource.zalando.com/restful-api-guidelines/#176)
    message: Error response must be application/problem+json
  must-use-valid-problem-json-schema:
    given: $.paths.*.*.responses.*.content.application/problem+json
    severity: error
    then:
      function: is-problem-json-schema
      field: schema
    description: >-
      `Problem` schema must include this set of minimal required properties and validations:


      ```

      type: object

      properties:
        type:
          type: string
          format: uri-reference
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
      */

      ```


      **Valid Example**


      ```yaml lineNumbers

      title: Problem

      type: object

      properties:
        type:
          type: string
          format: uri-reference
          example: /my-example/user-error
        title:
          type: string
          example: a title for the error situation
        status:
          type: integer
          format: int32
        detail:
          type: string
          example: description for the error situation
        instance:
          type: string
          format: uri-reference
          example:  /some/uri-reference#specific-occurrence-context
      ```


      [Zalando Guideline 176](https://opensource.zalando.com/restful-api-guidelines/#176)
    message: '{{error}}'
  must-have-info-description:
    given: $.info
    severity: error
    then:
      function: truthy
      field: description
    description: >+
      The `info` object must have a `description` property defined.


      **Valid Example**


      ```yaml lineNumbers

      info:
        description: This describes my API.
        ...
      ```


      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218)

    message: Must have API description defined in `info.description`
  must-have-info-contact-name:
    given: $.info
    severity: error
    then:
      function: truthy
      field: contact.name
    description: >
      The `info` object must have a `contact:name` property that contains a valid name for the team or person responsible for the API.


      **Valid Example**


      ```yaml lineNumbers

      info:
        ...
        ...
        contact:
          name: 'Tequila Mockingbirds'
      ```

      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218)
    message: Must have name defined in `info.contact.name`
  must-have-info-contact-url:
    given: $.info
    severity: error
    then:
      function: truthy
      field: contact.url
    description: >
      The `info` object must have a `contact:url` property that contains a valid URL to contact the team or person responsible for the API.

      **Valid Example**


      ```yaml lineNumbers

      info:
        ...
        ...
        contact:
          ...
          url: https://acme.com
          ...
      ```

      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218)
    message: Must have email defined in `info.contact.url`
  must-have-info-contact-email:
    given: $.info
    severity: error
    then:
      function: truthy
      field: contact.email
    description: >-
      The `info` object must have a `contact email` property that contains a valid email address for the responsible team.


      **Valid Example**


      ```yaml lineNumbers

      info:
        ...
        ...
        contact:
          email: 'support.contact@acme.com'
      ```


      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218)
    message: Must have email defined in `info.contact.email`
  must-have-info-x-api-id:
    given: $.info
    severity: error
    then:
      - function: schema
        functionOptions:
          schema:
            type: string
            pattern: ^[a-z0-9][a-z0-9-:.]{6,62}[a-z0-9]$
        field: x-api-id
      - function: defined
        field: x-api-id
    description: >-
      The `info` object must have an `x-api-id` property that conforms to this  pattern: `^[a-z0-9][a-z0-9-:.]{6,62}[a-z0-9]$`


      **Invalid Example**


      ```yaml lineNumbers

      info:
        api-id:
        title: Payments API    
      ``` 


      **Valid Example**


      ```yaml lineNumbers

      info:
        x-api-id: d0184f38-b98d-11e7-9c56-68f728c1ba70
        title: Payments API    
      ``` 

      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218) and [Zalando Guideline 215](https://opensource.zalando.com/restful-api-guidelines/#215)
    message: Missing `info.x-api-id`.
  must-provide-api-audience:
    given: $.info
    severity: error
    then:
      - function: pattern
        functionOptions:
          match: ^(component-internal|business-unit-internal|company-internal|external-partner|external-public)$
        field: x-audience
      - function: defined
        field: x-audience
    description: >
      The `info` object must have an `x-audience` that matches at least one of these values:


      * component-internal

      * business-unit-internal

      * company-internal

      * external-partner

      * external-public


      **Valid Example**


      ```yaml

      info:
        title: Payments API
        x-audience: 
          - company-internal
          - business-unit-internal
      ```

      [Zalando Guideline 219](https://opensource.zalando.com/restful-api-guidelines/#219)
    message: Missing or wrong `info.x-audience`.
  should-declare-enum-values-using-upper-snake-case-format:
    given: $.paths..[?(@ && @.type=='string')].[enum,x-extensible-enum].*
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^[A-Z][A-Z_0-9]*$
    description: >-
      `enum` and `x-extensible-enum` values should be in UPPER_SNAKE_CASE format.


      **Invalid Example**


      ```yaml lineNumbers

      schema:
        measurement:
         type: string
           x-extensible-enum:
             - Standard
             - Metric
             - Imperial
             - Non-standard
      ```


      **Valid Example**


      ```yaml lineNumbers

      schema:
        mesurement:
         type: string
           x-extensible-enum:
             - STANDARD
             - METRIC
             - IMPERIAL
             - NON_STANDARD
      ```


      [Zalando Guideline 240](https://opensource.zalando.com/restful-api-guidelines/#240)
    message: Enum values should be in UPPER_SNAKE_CASE format
  must-have-info-title:
    given: $.info
    severity: error
    then:
      function: truthy
      field: title
    description: >
      The `info` object must have a `title` property defined.


      **Valid Example**


      ```yaml lineNumbers

      info:
        title: Payments API
        ...
      ```


      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218)
    message: Must have API title defined in `info.title`
  must-have-info-version:
    given: $.info
    severity: error
    then:
      - function: defined
        field: version
      - function: schema
        functionOptions:
          schema:
            type: string
            pattern: ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$
        field: version
    description: >
      The `info` object must have a `version` property that follows [semantic rules](http://semver.org/spec/v2.0.0.html) to distinguish API versions.


      **Invalid Example**


      ```yaml lineNumbers

      info:
        title: ...
        description: ...
        version: 1
        <...>
      ```

      **Valid Example**


      ```yaml lineNumbers

      info:
        title: ...
        description: ...
        version: 1.1.0
        ...
      ```


      [Zalando Guideline 218](https://opensource.zalando.com/restful-api-guidelines/#218) and [Zalando Guideline 116](https://opensource.zalando.com/restful-api-guidelines/#116)
    message: Must have API version defined in `info.version`
